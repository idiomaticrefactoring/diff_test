[{"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/cutils.py", "cl": "", "me": "render_as_source_file", "idiom": "Assign Multi Targets", "compli_code": ["code_str = printer.doprint(content)", "includes = '\\n'.join(['#include <%s>' % h for h in printer.headers])"], "simple_code": ["code_str , includes  = printer.doprint(content), '\\n'.join(['#include <%s>' % h for h in printer.headers])", ""], "lineno": [[[6, 4], [6, 39]], [[7, 4], [7, 72]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/rewriting.py", "cl": "FuncMinusOneOptim", "me": "replace_in_Add", "idiom": "Chain Compare", "compli_code": ["len(func) == 1 and len(coeff) == 1"], "simple_code": ["len(func) == 1 == len(coeff)"], "lineno": [[[246, 19], [246, 53]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/rewriting.py", "cl": "FuncMinusOneOptim", "me": "replace_in_Add", "idiom": "Truth Value Test", "compli_code": ["numsum == 0"], "simple_code": ["not numsum"], "lineno": [[[240, 11], [240, 22]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/rewriting.py", "cl": "Optimization", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.cost_function = cost_function", "self.priority=priority"], "simple_code": ["self.cost_function , self.priority  = cost_function, priority", ""], "lineno": [[[65, 8], [65, 42]], [[66, 8], [66, 30]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/rewriting.py", "cl": "ReplaceOptim", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.query = query", "self.value = value"], "simple_code": ["self.query , self.value  = query, value", ""], "lineno": [[[106, 8], [106, 26]], [[107, 8], [107, 26]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/rewriting.py", "cl": "FuncMinusOneOptim", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.func = func", "self.func_m_1 = func_m_1", "self.opportunistic = opportunistic"], "simple_code": ["self.func , self.func_m_1 , self.opportunistic  = func, func_m_1, opportunistic", "", ""], "lineno": [[[227, 8], [227, 24]], [[228, 8], [228, 32]], [[229, 8], [229, 42]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/rewriting.py", "cl": "FuncMinusOneOptim", "me": "__call__", "idiom": "Assign Multi Targets", "compli_code": ["alt1 = super().__call__(expr)", "alt2 = super().__call__(expr.factor())"], "simple_code": ["alt1 , alt2  = super().__call__(expr), super().__call__(expr.factor())", ""], "lineno": [[[270, 8], [270, 37]], [[271, 8], [271, 46]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/algorithms.py", "cl": "", "me": "newtons_method", "idiom": "Assign Multi Targets", "compli_code": ["req = Gt(Abs(delta), atol)", "declars = [Declaration(Variable(delta, type=real, value=oo))]"], "simple_code": ["req , declars  = Gt(Abs(delta), atol), [Declaration(Variable(delta, type=real, value=oo))]", ""], "lineno": [[[73, 4], [73, 30]], [[74, 4], [74, 65]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/algorithms.py", "cl": "", "me": "newtons_method", "idiom": "Assign Multi Targets", "compli_code": ["delta = Dummy()", "Wrapper = Scope", "name_d = 'delta'"], "simple_code": ["delta , Wrapper , name_d  = Dummy(), Scope, 'delta'", "", ""], "lineno": [[[61, 8], [61, 23]], [[62, 8], [62, 23]], [[63, 8], [63, 24]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/algorithms.py", "cl": "", "me": "newtons_method", "idiom": "Assign Multi Targets", "compli_code": ["Wrapper = lambda x: x", "name_d = delta.name"], "simple_code": ["Wrapper , name_d  = lambda x: x, delta.name", ""], "lineno": [[[65, 8], [65, 29]], [[66, 8], [66, 27]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/algorithms.py", "cl": "", "me": "newtons_method_function", "idiom": "Assign Multi Targets", "compli_code": ["declars = tuple(Variable(p, real) for p in params)", "body = CodeBlock(algo, Return(wrt))"], "simple_code": ["declars , body  = tuple((Variable(p, real) for p in params)), CodeBlock(algo, Return(wrt))", ""], "lineno": [[[149, 4], [149, 54]], [[150, 4], [150, 39]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/fnodes.py", "cl": "Extent", "me": "__new__", "idiom": "Truth Value Test", "compli_code": ["len(args) == 0"], "simple_code": ["not len(args)"], "lineno": [[[284, 13], [284, 27]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/fnodes.py", "cl": "Extent", "me": "_sympystr", "idiom": "Truth Value Test", "compli_code": ["len(self.args) == 0"], "simple_code": ["not len(self.args)"], "lineno": [[[290, 11], [290, 30]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/fnodes.py", "cl": "", "me": "dimension", "idiom": "Truth Value Test", "compli_code": ["len(args) == 0"], "simple_code": ["not len(args)"], "lineno": [[[327, 7], [327, 21]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/ast.py", "cl": "Token", "me": "_construct", "idiom": "Truth Value Test", "compli_code": ["arg == None"], "simple_code": ["not arg"], "lineno": [[[203, 11], [203, 22]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/ast.py", "cl": "Token", "me": "_sympyrepr", "idiom": "Assign Multi Targets", "compli_code": ["exclude = kwargs.get('exclude', ())", "values = [getattr(self, k) for k in self._fields]", "indent_level = printer._context.get('indent_level', 0)", "arg_reprs = []"], "simple_code": ["exclude , values , indent_level , arg_reprs  = kwargs.get('exclude', ()), [getattr(self, k) for k in self._fields], printer._context.get('indent_level', 0), []", "", "", ""], "lineno": [[[293, 8], [293, 43]], [[294, 8], [294, 57]], [[295, 8], [295, 62]], [[297, 8], [297, 22]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/ast.py", "cl": "AssignmentBase", "me": "__new__", "idiom": "Assign Multi Targets", "compli_code": ["lhs = _sympify(lhs)", "rhs = _sympify(rhs)"], "simple_code": ["lhs , rhs  = _sympify(lhs), _sympify(rhs)", ""], "lineno": [[[413, 8], [413, 27]], [[414, 8], [414, 27]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/ast.py", "cl": "AssignmentBase", "me": "_check_args", "idiom": "Assign Multi Targets", "compli_code": ["lhs_is_mat = hasattr(lhs, 'shape') and not isinstance(lhs, Indexed)", "rhs_is_mat = hasattr(rhs, 'shape') and not isinstance(rhs, Indexed)"], "simple_code": ["lhs_is_mat , rhs_is_mat  = hasattr(lhs, 'shape') and (not isinstance(lhs, Indexed)), hasattr(rhs, 'shape') and (not isinstance(rhs, Indexed))", ""], "lineno": [[[448, 8], [448, 75]], [[449, 8], [449, 75]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/ast.py", "cl": "CodeBlock", "me": "__new__", "idiom": "Assign Multi Targets", "compli_code": ["left_hand_sides = []", "right_hand_sides = []"], "simple_code": ["left_hand_sides , right_hand_sides  = [], []", ""], "lineno": [[[633, 8], [633, 28]], [[634, 8], [634, 29]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/ast.py", "cl": "CodeBlock", "me": "__new__", "idiom": "Assign Multi Targets", "compli_code": ["obj.left_hand_sides = Tuple(*left_hand_sides)", "obj.right_hand_sides = Tuple(*right_hand_sides)"], "simple_code": ["obj.left_hand_sides , obj.right_hand_sides  = Tuple(*left_hand_sides), Tuple(*right_hand_sides)", ""], "lineno": [[[643, 8], [643, 53]], [[644, 8], [644, 55]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/ast.py", "cl": "CodeBlock", "me": "topological_sort", "idiom": "Assign Multi Targets", "compli_code": ["A = list(enumerate(assignments))", "var_map = defaultdict(list)"], "simple_code": ["A , var_map  = list(enumerate(assignments)), defaultdict(list)", ""], "lineno": [[[725, 8], [725, 40]], [[729, 8], [729, 35]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/ast.py", "cl": "CodeBlock", "me": "cse", "idiom": "Assign Multi Targets", "compli_code": ["new_block = [Assignment(var, expr) for var, expr in\n            zip(self.left_hand_sides, reduced_exprs)]", "new_assignments = [Assignment(var, expr) for var, expr in replacements]"], "simple_code": ["new_block , new_assignments  = [Assignment(var, expr) for (var, expr) in zip(self.left_hand_sides, reduced_exprs)], [Assignment(var, expr) for (var, expr) in replacements]", ""], "lineno": [[[805, 8], [806, 53]], [[807, 8], [807, 79]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/ast.py", "cl": "Type", "me": "cast_check", "idiom": "Assign Multi Targets", "compli_code": ["val = sympify(value)", "ten = Integer(10)", "exp10 = getattr(self, 'decimal_dig', None)"], "simple_code": ["val , ten , exp10  = sympify(value), Integer(10), getattr(self, 'decimal_dig', None)", "", ""], "lineno": [[[1118, 8], [1118, 28]], [[1120, 8], [1120, 25]], [[1121, 8], [1121, 50]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/ast.py", "cl": "Type", "me": "_latex", "idiom": "Assign Multi Targets", "compli_code": ["type_name = latex_escape(self.__class__.__name__)", "name = latex_escape(self.name.text)"], "simple_code": ["type_name , name  = latex_escape(self.__class__.__name__), latex_escape(self.name.text)", ""], "lineno": [[[1140, 8], [1140, 57]], [[1141, 8], [1141, 43]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/futils.py", "cl": "", "me": "render_as_module", "idiom": "Assign Multi Targets", "compli_code": ["printer = FCodePrinter(printer_settings)", "dummy = Dummy()"], "simple_code": ["printer , dummy  = FCodePrinter(printer_settings), Dummy()", ""], "lineno": [[[29, 4], [29, 44]], [[30, 4], [30, 19]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/futils.py", "cl": "", "me": "render_as_module", "idiom": "Assign Multi Targets", "compli_code": ["fstr = printer.doprint(mod)", "module_use_str = '   %s\\n' % '   \\n'.join(['use %s, only: %s' % (k, ', '.join(v)) for\n                                                k, v in printer.module_uses.items()])"], "simple_code": ["fstr , module_use_str  = printer.doprint(mod), '   %s\\n' % '   \\n'.join(['use %s, only: %s' % (k, ', '.join(v)) for (k, v) in printer.module_uses.items()])", ""], "lineno": [[[34, 4], [34, 31]], [[35, 4], [36, 85]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/approximations.py", "cl": "SumApprox", "me": "value", "idiom": "List Comprehension", "compli_code": ["new_terms = []", "for term, (lo, hi) in zip(add.args, bounds):\n                if max(abs(lo), abs(hi)) >= largest_abs_guarantee*self.reltol:\n                    new_terms.append(term)"], "simple_code": ["", "new_terms = [term for (term, (lo, hi)) in zip(add.args, bounds) if max(abs(lo), abs(hi)) >= largest_abs_guarantee * self.reltol]"], "lineno": [[[94, 12], [94, 26]], [[95, 12], [97, 42]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/approximations.py", "cl": "SumApprox", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.bounds = bounds", "self.reltol = reltol"], "simple_code": ["self.bounds , self.reltol  = bounds, reltol", ""], "lineno": [[[56, 8], [56, 28]], [[57, 8], [57, 28]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/approximations.py", "cl": "SumApprox", "me": "value", "idiom": "Assign Multi Targets", "compli_code": ["bounds = [(term, term) if term.is_number else self.bounds[term] for term in add.args]", "largest_abs_guarantee = 0"], "simple_code": ["bounds , largest_abs_guarantee  = [(term, term) if term.is_number else self.bounds[term] for term in add.args], 0", ""], "lineno": [[[87, 12], [87, 97]], [[88, 12], [88, 37]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/approximations.py", "cl": "SeriesApprox", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.bounds = bounds", "self.reltol = reltol", "self.max_order = max_order"], "simple_code": ["self.bounds , self.reltol , self.max_order  = bounds, reltol, max_order", "", ""], "lineno": [[[143, 8], [143, 28]], [[144, 8], [144, 28]], [[145, 8], [145, 34]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/approximations.py", "cl": "SeriesApprox", "me": "value", "idiom": "Assign Multi Targets", "compli_code": ["x0 = (lo + hi)/2", "cheapest = None"], "simple_code": ["x0 , cheapest  = (lo + hi) / 2, None", ""], "lineno": [[[166, 8], [166, 24]], [[167, 8], [167, 23]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/approximations.py", "cl": "SeriesApprox", "me": "value", "idiom": "Assign Multi Targets", "compli_code": ["fseri = fexpr.series(symb, x0=x0, n=n).removeO()", "n_ok = True"], "simple_code": ["fseri , n_ok  = fexpr.series(symb, x0=x0, n=n).removeO(), True", ""], "lineno": [[[169, 12], [169, 60]], [[170, 12], [170, 23]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/approximations.py", "cl": "SeriesApprox", "me": "value", "idiom": "Assign Multi Targets", "compli_code": ["val = fseri.xreplace({symb: x})", "ref = fexpr.xreplace({symb: x})"], "simple_code": ["val , ref  = fseri.xreplace({symb: x}), fexpr.xreplace({symb: x})", ""], "lineno": [[[173, 16], [173, 47]], [[174, 16], [174, 47]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_scipy_nodes.py", "cl": "", "me": "test_cosm1", "idiom": "Truth Value Test", "compli_code": ["(\n            cm1_xy.diff(wrt, deriv_order) -\n            ref_xy.diff(wrt, deriv_order)\n        ).rewrite(cos).simplify() == 0"], "simple_code": ["not (cm1_xy.diff(wrt, deriv_order) - ref_xy.diff(wrt, deriv_order)).rewrite(cos).simplify()"], "lineno": [[[14, 15], [17, 38]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_scipy_nodes.py", "cl": "", "me": "test_cosm1", "idiom": "Assign Multi Targets", "compli_code": ["cm1_xy = cosm1(x*y)", "ref_xy = cos(x*y) - 1"], "simple_code": ["cm1_xy , ref_xy  = cosm1(x * y), cos(x * y) - 1", ""], "lineno": [[[11, 4], [11, 23]], [[12, 4], [12, 25]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_approximations.py", "cl": "", "me": "test_SumApprox_trivial", "idiom": "Truth Value Test", "compli_code": ["apx1 - 1 == 0"], "simple_code": ["not apx1 - 1"], "lineno": [[[13, 11], [13, 24]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_approximations.py", "cl": "", "me": "test_SumApprox_monotone_terms", "idiom": "Truth Value Test", "compli_code": ["(optimize(expr1, [sum_approx_m2])/exp(z) - (y**2)).simplify() == 0"], "simple_code": ["not (optimize(expr1, [sum_approx_m2]) / exp(z) - y ** 2).simplify()"], "lineno": [[[23, 11], [23, 77]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_approximations.py", "cl": "", "me": "test_SumApprox_monotone_terms", "idiom": "Truth Value Test", "compli_code": ["(optimize(expr1, [sum_approx_m5])/exp(z) - (y**2 + 1)).simplify() == 0"], "simple_code": ["not (optimize(expr1, [sum_approx_m5]) / exp(z) - (y ** 2 + 1)).simplify()"], "lineno": [[[24, 11], [24, 81]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_approximations.py", "cl": "", "me": "test_SumApprox_monotone_terms", "idiom": "Truth Value Test", "compli_code": ["(optimize(expr1, [sum_approx_m11])/exp(z) - (y**2 + 1 + x**2)).simplify() == 0"], "simple_code": ["not (optimize(expr1, [sum_approx_m11]) / exp(z) - (y ** 2 + 1 + x ** 2)).simplify()"], "lineno": [[[25, 11], [25, 89]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_approximations.py", "cl": "", "me": "test_SeriesApprox_trivial", "idiom": "Truth Value Test", "compli_code": ["(res_50/factor - ref_50).simplify() == 0"], "simple_code": ["not (res_50 / factor - ref_50).simplify()"], "lineno": [[[48, 15], [48, 55]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_approximations.py", "cl": "", "me": "test_SeriesApprox_trivial", "idiom": "Truth Value Test", "compli_code": ["(res_10/factor - ref_10).simplify() == 0"], "simple_code": ["not (res_10 / factor - ref_10).simplify()"], "lineno": [[[49, 15], [49, 55]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_approximations.py", "cl": "", "me": "test_SeriesApprox_trivial", "idiom": "Truth Value Test", "compli_code": ["(res_05/factor - ref_05).simplify() == 0"], "simple_code": ["not (res_05 / factor - ref_05).simplify()"], "lineno": [[[50, 15], [50, 55]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_approximations.py", "cl": "", "me": "test_SumApprox_trivial", "idiom": "Assign Multi Targets", "compli_code": ["expr1 = 1 + x", "sum_approx = SumApprox(bounds={x: (-1e-20, 1e-20)}, reltol=1e-16)"], "simple_code": ["expr1 , sum_approx  = 1 + x, SumApprox(bounds={x: (-1e-20, 1e-20)}, reltol=1e-16)", ""], "lineno": [[[10, 4], [10, 17]], [[11, 4], [11, 69]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_approximations.py", "cl": "", "me": "test_SumApprox_monotone_terms", "idiom": "Assign Multi Targets", "compli_code": ["expr1 = exp(z)*(x**2 + y**2 + 1)", "bnds1 = {x: (0, 1e-3), y: (100, 1000)}"], "simple_code": ["expr1 , bnds1  = exp(z) * (x ** 2 + y ** 2 + 1), {x: (0, 0.001), y: (100, 1000)}", ""], "lineno": [[[18, 4], [18, 36]], [[19, 4], [19, 42]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_approximations.py", "cl": "", "me": "test_SumApprox_monotone_terms", "idiom": "Assign Multi Targets", "compli_code": ["sum_approx_m2 = SumApprox(bounds=bnds1, reltol=1e-2)", "sum_approx_m5 = SumApprox(bounds=bnds1, reltol=1e-5)", "sum_approx_m11 = SumApprox(bounds=bnds1, reltol=1e-11)"], "simple_code": ["sum_approx_m2 , sum_approx_m5 , sum_approx_m11  = SumApprox(bounds=bnds1, reltol=0.01), SumApprox(bounds=bnds1, reltol=1e-05), SumApprox(bounds=bnds1, reltol=1e-11)", "", ""], "lineno": [[[20, 4], [20, 56]], [[21, 4], [21, 56]], [[22, 4], [22, 58]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_approximations.py", "cl": "", "me": "test_SeriesApprox_trivial", "idiom": "Assign Multi Targets", "compli_code": ["expr1 = exp(x)*factor", "bnds1 = {x: (-1, 1)}"], "simple_code": ["expr1 , bnds1  = exp(x) * factor, {x: (-1, 1)}", ""], "lineno": [[[32, 8], [32, 29]], [[33, 8], [33, 28]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_approximations.py", "cl": "", "me": "test_SeriesApprox_trivial", "idiom": "Assign Multi Targets", "compli_code": ["series_approx_50 = SeriesApprox(bounds=bnds1, reltol=0.50)", "series_approx_10 = SeriesApprox(bounds=bnds1, reltol=0.10)", "series_approx_05 = SeriesApprox(bounds=bnds1, reltol=0.05)", "c = (bnds1[x][1] + bnds1[x][0])/2"], "simple_code": ["series_approx_50 , series_approx_10 , series_approx_05 , c  = SeriesApprox(bounds=bnds1, reltol=0.5), SeriesApprox(bounds=bnds1, reltol=0.1), SeriesApprox(bounds=bnds1, reltol=0.05), (bnds1[x][1] + bnds1[x][0]) / 2", "", "", ""], "lineno": [[[34, 8], [34, 66]], [[35, 8], [35, 66]], [[36, 8], [36, 66]], [[37, 8], [37, 41]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_approximations.py", "cl": "", "me": "test_SeriesApprox_trivial", "idiom": "Assign Multi Targets", "compli_code": ["ref_50 = f0 + x + x**2/2", "ref_10 = f0 + x + x**2/2 + x**3/6", "ref_05 = f0 + x + x**2/2 + x**3/6 + x**4/24", "res_50 = optimize(expr1, [series_approx_50])", "res_10 = optimize(expr1, [series_approx_10])", "res_05 = optimize(expr1, [series_approx_05])"], "simple_code": ["ref_50 , ref_10 , ref_05 , res_50 , res_10 , res_05  = f0 + x + x ** 2 / 2, f0 + x + x ** 2 / 2 + x ** 3 / 6, f0 + x + x ** 2 / 2 + x ** 3 / 6 + x ** 4 / 24, optimize(expr1, [series_approx_50]), optimize(expr1, [series_approx_10]), optimize(expr1, [series_approx_05])", "", "", "", "", ""], "lineno": [[[40, 8], [40, 32]], [[41, 8], [41, 41]], [[42, 8], [42, 51]], [[44, 8], [44, 52]], [[45, 8], [45, 52]], [[46, 8], [46, 52]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_fnodes.py", "cl": "", "me": "test_size_assumed_shape", "idiom": "Assign Multi Targets", "compli_code": ["body = [Return((sum_(a**2)/size(a))**.5)]", "arr = array(a, dim=[':'], intent='in')"], "simple_code": ["body , arr  = [Return((sum_(a ** 2) / size(a)) ** 0.5)], array(a, dim=[':'], intent='in')", ""], "lineno": [[[36, 4], [36, 45]], [[37, 4], [37, 42]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_fnodes.py", "cl": "", "me": "test_ImpliedDoLoop", "idiom": "Assign Multi Targets", "compli_code": ["ac = ArrayConstructor([-28, idl, 28])", "a = array(a, dim=[':'], attrs=[allocatable])"], "simple_code": ["ac , a  = ArrayConstructor([-28, idl, 28]), array(a, dim=[':'], attrs=[allocatable])", ""], "lineno": [[[64, 4], [64, 41]], [[65, 4], [65, 48]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_fnodes.py", "cl": "", "me": "test_Program", "idiom": "Assign Multi Targets", "compli_code": ["decl = Declaration(vx)", "prnt = Print([x, x+1])"], "simple_code": ["decl , prnt  = Declaration(vx), Print([x, x + 1])", ""], "lineno": [[[83, 4], [83, 26]], [[84, 4], [84, 26]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_fnodes.py", "cl": "", "me": "test_Module", "idiom": "Assign Multi Targets", "compli_code": ["mod_sq = Module('mod_sq', [], [sq])", "sq_call = FunctionCall('sqr', [42.])"], "simple_code": ["mod_sq , sq_call  = Module('mod_sq', [], [sq]), FunctionCall('sqr', [42.0])", ""], "lineno": [[[101, 4], [101, 39]], [[102, 4], [102, 40]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_fnodes.py", "cl": "", "me": "test_Subroutine", "idiom": "Assign Multi Targets", "compli_code": ["v_r = Variable.deduced(r, attrs=(dimension(assumed_extent), intent_out))", "v_i = Variable.deduced(i)", "v_n = Variable('n', integer)"], "simple_code": ["v_r , v_i , v_n  = Variable.deduced(r, attrs=(dimension(assumed_extent), intent_out)), Variable.deduced(i), Variable('n', integer)", "", ""], "lineno": [[[125, 4], [125, 76]], [[126, 4], [126, 29]], [[127, 4], [127, 32]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_fnodes.py", "cl": "", "me": "test_Subroutine", "idiom": "Assign Multi Targets", "compli_code": ["sub = Subroutine(\"f\", [v_r], [\n        Declaration(v_n),\n        Declaration(v_i),\n        Assignment(v_n, size(r)),\n        do_loop\n    ])", "x = Symbol('x', real=True)"], "simple_code": ["sub , x  = Subroutine('f', [v_r], [Declaration(v_n), Declaration(v_i), Assignment(v_n, size(r)), do_loop]), Symbol('x', real=True)", ""], "lineno": [[[131, 4], [136, 6]], [[137, 4], [137, 30]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_fnodes.py", "cl": "", "me": "test_Subroutine", "idiom": "Assign Multi Targets", "compli_code": ["v_x3 = Variable.deduced(x, attrs=[dimension(3)])", "mod = Module('mymod', definitions=[sub])"], "simple_code": ["v_x3 , mod  = Variable.deduced(x, attrs=[dimension(3)]), Module('mymod', definitions=[sub])", ""], "lineno": [[[138, 4], [138, 52]], [[139, 4], [139, 44]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_fnodes.py", "cl": "", "me": "test_bind_C", "idiom": "Assign Multi Targets", "compli_code": ["a = Symbol('a', real=True)", "s = Symbol('s', integer=True)"], "simple_code": ["a , s  = Symbol('a', real=True), Symbol('s', integer=True)", ""], "lineno": [[[196, 4], [196, 30]], [[197, 4], [197, 33]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_fnodes.py", "cl": "", "me": "test_bind_C", "idiom": "Assign Multi Targets", "compli_code": ["body = [Return((sum_(a**2)/s)**.5)]", "arr = array(a, dim=[s], intent='in')"], "simple_code": ["body , arr  = [Return((sum_(a ** 2) / s) ** 0.5)], array(a, dim=[s], intent='in')", ""], "lineno": [[[198, 4], [198, 39]], [[199, 4], [199, 40]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_expm1", "idiom": "Truth Value Test", "compli_code": ["expm1(0) == 0"], "simple_code": ["not expm1(0)"], "lineno": [[[13, 11], [13, 24]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_expm1", "idiom": "Truth Value Test", "compli_code": ["expm1(42*x).diff(x) - 42*exp(42*x) == 0"], "simple_code": ["not expm1(42 * x).diff(x) - 42 * exp(42 * x)"], "lineno": [[[31, 11], [31, 50]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_expm1", "idiom": "Truth Value Test", "compli_code": ["expm1(42*x).diff(x) - expm1(42*x).expand(func=True).diff(x) == 0"], "simple_code": ["not expm1(42 * x).diff(x) - expm1(42 * x).expand(func=True).diff(x)"], "lineno": [[[32, 11], [32, 75]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_log1p", "idiom": "Truth Value Test", "compli_code": ["log1p(0) == 0"], "simple_code": ["not log1p(0)"], "lineno": [[[37, 11], [37, 24]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_log1p", "idiom": "Truth Value Test", "compli_code": ["expand_log(log1p(d**-1000) - log(d**1000 + 1) + log(d**1000)) == 0"], "simple_code": ["not expand_log(log1p(d ** (-1000)) - log(d ** 1000 + 1) + log(d ** 1000))"], "lineno": [[[39, 11], [39, 77]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_log1p", "idiom": "Truth Value Test", "compli_code": ["log1p(x).expand(func=True) - log(x + 1) == 0"], "simple_code": ["not log1p(x).expand(func=True) - log(x + 1)"], "lineno": [[[44, 11], [44, 55]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_log1p", "idiom": "Truth Value Test", "compli_code": ["log1p(x).rewrite('tractable') - log(x + 1) == 0"], "simple_code": ["not log1p(x).rewrite('tractable') - log(x + 1)"], "lineno": [[[45, 11], [45, 58]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_log1p", "idiom": "Truth Value Test", "compli_code": ["log1p(x).rewrite('log') - log(x + 1) == 0"], "simple_code": ["not log1p(x).rewrite('log') - log(x + 1)"], "lineno": [[[46, 11], [46, 52]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_log1p", "idiom": "Truth Value Test", "compli_code": ["log1p(42*x).diff(x) - 42/(42*x + 1) == 0"], "simple_code": ["not log1p(42 * x).diff(x) - 42 / (42 * x + 1)"], "lineno": [[[68, 11], [68, 51]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_log1p", "idiom": "Truth Value Test", "compli_code": ["log1p(42*x).diff(x) - log1p(42*x).expand(func=True).diff(x) == 0"], "simple_code": ["not log1p(42 * x).diff(x) - log1p(42 * x).expand(func=True).diff(x)"], "lineno": [[[69, 11], [69, 75]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_exp2", "idiom": "Truth Value Test", "compli_code": ["exp2(x).expand(func=True) - 2**x == 0"], "simple_code": ["not exp2(x).expand(func=True) - 2 ** x"], "lineno": [[[79, 11], [79, 48]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_exp2", "idiom": "Truth Value Test", "compli_code": ["exp2(42*x).diff(x) - 42*exp2(42*x)*log(2) == 0"], "simple_code": ["not exp2(42 * x).diff(x) - 42 * exp2(42 * x) * log(2)"], "lineno": [[[82, 11], [82, 57]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_exp2", "idiom": "Truth Value Test", "compli_code": ["exp2(42*x).diff(x) - exp2(42*x).diff(x) == 0"], "simple_code": ["not exp2(42 * x).diff(x) - exp2(42 * x).diff(x)"], "lineno": [[[83, 11], [83, 55]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_log2", "idiom": "Truth Value Test", "compli_code": ["log2(x).expand(func=True) - log(x)/log(2) == 0"], "simple_code": ["not log2(x).expand(func=True) - log(x) / log(2)"], "lineno": [[[96, 11], [96, 57]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_log2", "idiom": "Truth Value Test", "compli_code": ["log2(42*x).diff() - 1/(log(2)*x) == 0"], "simple_code": ["not log2(42 * x).diff() - 1 / (log(2) * x)"], "lineno": [[[99, 11], [99, 48]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_log2", "idiom": "Truth Value Test", "compli_code": ["log2(42*x).diff() - log2(42*x).expand(func=True).diff(x) == 0"], "simple_code": ["not log2(42 * x).diff() - log2(42 * x).expand(func=True).diff(x)"], "lineno": [[[100, 11], [100, 72]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_fma", "idiom": "Truth Value Test", "compli_code": ["fma(x, y, z).expand(func=True) - x*y - z == 0"], "simple_code": ["not fma(x, y, z).expand(func=True) - x * y - z"], "lineno": [[[107, 11], [107, 56]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_fma", "idiom": "Truth Value Test", "compli_code": ["expr.diff(x) - expr.expand(func=True).diff(x) == 0"], "simple_code": ["not expr.diff(x) - expr.expand(func=True).diff(x)"], "lineno": [[[112, 11], [112, 61]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_fma", "idiom": "Truth Value Test", "compli_code": ["expr.diff(y) - expr.expand(func=True).diff(y) == 0"], "simple_code": ["not expr.diff(y) - expr.expand(func=True).diff(y)"], "lineno": [[[113, 11], [113, 61]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_fma", "idiom": "Truth Value Test", "compli_code": ["expr.diff(z) - expr.expand(func=True).diff(z) == 0"], "simple_code": ["not expr.diff(z) - expr.expand(func=True).diff(z)"], "lineno": [[[114, 11], [114, 61]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_fma", "idiom": "Truth Value Test", "compli_code": ["expr.diff(x) - 17*42*y == 0"], "simple_code": ["not expr.diff(x) - 17 * 42 * y"], "lineno": [[[116, 11], [116, 38]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_fma", "idiom": "Truth Value Test", "compli_code": ["expr.diff(y) - 17*42*x == 0"], "simple_code": ["not expr.diff(y) - 17 * 42 * x"], "lineno": [[[117, 11], [117, 38]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_fma", "idiom": "Truth Value Test", "compli_code": ["expr.diff(z) - 101 == 0"], "simple_code": ["not expr.diff(z) - 101"], "lineno": [[[118, 11], [118, 34]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_log10", "idiom": "Truth Value Test", "compli_code": ["log10(x).expand(func=True) - log(x)/log(10) == 0"], "simple_code": ["not log10(x).expand(func=True) - log(x) / log(10)"], "lineno": [[[125, 11], [125, 59]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_log10", "idiom": "Truth Value Test", "compli_code": ["log10(42*x).diff(x) - 1/(log(10)*x) == 0"], "simple_code": ["not log10(42 * x).diff(x) - 1 / (log(10) * x)"], "lineno": [[[128, 11], [128, 51]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_log10", "idiom": "Truth Value Test", "compli_code": ["log10(42*x).diff(x) - log10(42*x).expand(func=True).diff(x) == 0"], "simple_code": ["not log10(42 * x).diff(x) - log10(42 * x).expand(func=True).diff(x)"], "lineno": [[[129, 11], [129, 75]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_Cbrt", "idiom": "Truth Value Test", "compli_code": ["Cbrt(x).expand(func=True) - x**Rational(1, 3) == 0"], "simple_code": ["not Cbrt(x).expand(func=True) - x ** Rational(1, 3)"], "lineno": [[[136, 11], [136, 61]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_Cbrt", "idiom": "Truth Value Test", "compli_code": ["Cbrt(42*x).diff(x) - 42*(42*x)**(Rational(1, 3) - 1)/3 == 0"], "simple_code": ["not Cbrt(42 * x).diff(x) - 42 * (42 * x) ** (Rational(1, 3) - 1) / 3"], "lineno": [[[139, 11], [139, 70]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_Cbrt", "idiom": "Truth Value Test", "compli_code": ["Cbrt(42*x).diff(x) - Cbrt(42*x).expand(func=True).diff(x) == 0"], "simple_code": ["not Cbrt(42 * x).diff(x) - Cbrt(42 * x).expand(func=True).diff(x)"], "lineno": [[[140, 11], [140, 73]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_Sqrt", "idiom": "Truth Value Test", "compli_code": ["Sqrt(x).expand(func=True) - x**S.Half == 0"], "simple_code": ["not Sqrt(x).expand(func=True) - x ** S.Half"], "lineno": [[[147, 11], [147, 53]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_Sqrt", "idiom": "Truth Value Test", "compli_code": ["Sqrt(42*x).diff(x) - 42*(42*x)**(S.Half - 1)/2 == 0"], "simple_code": ["not Sqrt(42 * x).diff(x) - 42 * (42 * x) ** (S.Half - 1) / 2"], "lineno": [[[150, 11], [150, 62]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_Sqrt", "idiom": "Truth Value Test", "compli_code": ["Sqrt(42*x).diff(x) - Sqrt(42*x).expand(func=True).diff(x) == 0"], "simple_code": ["not Sqrt(42 * x).diff(x) - Sqrt(42 * x).expand(func=True).diff(x)"], "lineno": [[[151, 11], [151, 73]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_hypot", "idiom": "Truth Value Test", "compli_code": ["hypot(x, y).expand(func=True) - (x**2 + y**2)**S.Half == 0"], "simple_code": ["not hypot(x, y).expand(func=True) - (x ** 2 + y ** 2) ** S.Half"], "lineno": [[[158, 11], [158, 69]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_hypot", "idiom": "Truth Value Test", "compli_code": ["hypot(17*x, 42*y).diff(x).expand(func=True) - hypot(17*x, 42*y).expand(func=True).diff(x) == 0"], "simple_code": ["not hypot(17 * x, 42 * y).diff(x).expand(func=True) - hypot(17 * x, 42 * y).expand(func=True).diff(x)"], "lineno": [[[161, 11], [161, 105]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_hypot", "idiom": "Truth Value Test", "compli_code": ["hypot(17*x, 42*y).diff(y).expand(func=True) - hypot(17*x, 42*y).expand(func=True).diff(y) == 0"], "simple_code": ["not hypot(17 * x, 42 * y).diff(y).expand(func=True) - hypot(17 * x, 42 * y).expand(func=True).diff(y)"], "lineno": [[[162, 11], [162, 105]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_hypot", "idiom": "Truth Value Test", "compli_code": ["hypot(17*x, 42*y).diff(x).expand(func=True) - 2*17*17*x*((17*x)**2 + (42*y)**2)**Rational(-1, 2)/2 == 0"], "simple_code": ["not hypot(17 * x, 42 * y).diff(x).expand(func=True) - 2 * 17 * 17 * x * ((17 * x) ** 2 + (42 * y) ** 2) ** Rational(-1, 2) / 2"], "lineno": [[[164, 11], [164, 114]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_cfunctions.py", "cl": "", "me": "test_hypot", "idiom": "Truth Value Test", "compli_code": ["hypot(17*x, 42*y).diff(y).expand(func=True) - 2*42*42*y*((17*x)**2 + (42*y)**2)**Rational(-1, 2)/2 == 0"], "simple_code": ["not hypot(17 * x, 42 * y).diff(y).expand(func=True) - 2 * 42 * 42 * y * ((17 * x) ** 2 + (42 * y) ** 2) ** Rational(-1, 2) / 2"], "lineno": [[[165, 11], [165, 114]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_numpy_nodes.py", "cl": "", "me": "test_logaddexp", "idiom": "Truth Value Test", "compli_code": ["(\n            lae_xy.diff(wrt, deriv_order) -\n            ref_xy.diff(wrt, deriv_order)\n        ).rewrite(log).simplify() == 0"], "simple_code": ["not (lae_xy.diff(wrt, deriv_order) - ref_xy.diff(wrt, deriv_order)).rewrite(log).simplify()"], "lineno": [[[14, 15], [17, 38]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_numpy_nodes.py", "cl": "", "me": "test_logaddexp2", "idiom": "Truth Value Test", "compli_code": ["(\n            lae2_xy.diff(wrt, deriv_order) -\n            ref2_xy.diff(wrt, deriv_order)\n        ).rewrite(log).cancel() == 0"], "simple_code": ["not (lae2_xy.diff(wrt, deriv_order) - ref2_xy.diff(wrt, deriv_order)).rewrite(log).cancel()"], "lineno": [[[34, 15], [37, 36]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_numpy_nodes.py", "cl": "", "me": "test_logaddexp", "idiom": "Assign Multi Targets", "compli_code": ["lae_xy = logaddexp(x, y)", "ref_xy = log(exp(x) + exp(y))"], "simple_code": ["lae_xy , ref_xy  = logaddexp(x, y), log(exp(x) + exp(y))", ""], "lineno": [[[11, 4], [11, 28]], [[12, 4], [12, 33]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_numpy_nodes.py", "cl": "", "me": "test_logaddexp", "idiom": "Assign Multi Targets", "compli_code": ["logThirdE = log(one_third_e)", "logTwoThirdsE = log(two_thirds_e)"], "simple_code": ["logThirdE , logTwoThirdsE  = log(one_third_e), log(two_thirds_e)", ""], "lineno": [[[21, 4], [21, 32]], [[22, 4], [22, 37]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_numpy_nodes.py", "cl": "", "me": "test_logaddexp2", "idiom": "Assign Multi Targets", "compli_code": ["lae2_xy = logaddexp2(x, y)", "ref2_xy = log(2**x + 2**y)/log(2)"], "simple_code": ["lae2_xy , ref2_xy  = logaddexp2(x, y), log(2 ** x + 2 ** y) / log(2)", ""], "lineno": [[[31, 4], [31, 30]], [[32, 4], [32, 37]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_numpy_nodes.py", "cl": "", "me": "test_logaddexp2", "idiom": "Assign Multi Targets", "compli_code": ["lbTwoThirds = lb(two_thirds)", "lbFourThirds = lb(four_thirds)"], "simple_code": ["lbTwoThirds , lbFourThirds  = lb(two_thirds), lb(four_thirds)", ""], "lineno": [[[44, 4], [44, 32]], [[45, 4], [45, 34]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_applications.py", "cl": "", "me": "_render_compile_import", "idiom": "Assign Multi Targets", "compli_code": ["code_str = render_as_source_file(funcdef, settings=dict(contract=False))", "declar = ccode(FunctionPrototype.from_FunctionDefinition(funcdef))"], "simple_code": ["code_str , declar  = render_as_source_file(funcdef, settings=dict(contract=False)), ccode(FunctionPrototype.from_FunctionDefinition(funcdef))", ""], "lineno": [[[29, 4], [29, 76]], [[30, 4], [30, 70]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_expm1_opt", "idiom": "Truth Value Test", "compli_code": ["expm1(x) - opt1 == 0"], "simple_code": ["not expm1(x) - opt1"], "lineno": [[[77, 11], [77, 31]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_expm1_opt", "idiom": "Truth Value Test", "compli_code": ["(opt7.rewrite(exp) - expr7).factor() == 0"], "simple_code": ["not (opt7.rewrite(exp) - expr7).factor()"], "lineno": [[[116, 11], [116, 52]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_expm1_opt", "idiom": "Truth Value Test", "compli_code": ["(tgt8a - tgt8b).rewrite(exp).factor() == 0"], "simple_code": ["not (tgt8a - tgt8b).rewrite(exp).factor()"], "lineno": [[[126, 11], [126, 53]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_expm1_opt", "idiom": "Truth Value Test", "compli_code": ["(opt8.rewrite(exp) - expr8).factor() == 0"], "simple_code": ["not (opt8.rewrite(exp) - expr8).factor()"], "lineno": [[[128, 11], [128, 52]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_cosm1_opt", "idiom": "Truth Value Test", "compli_code": ["cosm1(x) - opt1 == 0"], "simple_code": ["not cosm1(x) - opt1"], "lineno": [[[150, 11], [150, 31]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_log1p_opt", "idiom": "Truth Value Test", "compli_code": ["log1p(x) - opt1 == 0"], "simple_code": ["not log1p(x) - opt1"], "lineno": [[[201, 11], [201, 31]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_log1p_opt", "idiom": "Truth Value Test", "compli_code": ["(opt2.rewrite(log) - expr2).simplify() == 0"], "simple_code": ["not (opt2.rewrite(log) - expr2).simplify()"], "lineno": [[[207, 11], [207, 54]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_log1p_opt", "idiom": "Truth Value Test", "compli_code": ["log1p(2*x) - opt3 == 0"], "simple_code": ["not log1p(2 * x) - opt3"], "lineno": [[[211, 11], [211, 33]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_optims_c99", "idiom": "Truth Value Test", "compli_code": ["delta3 == 0"], "simple_code": ["not delta3"], "lineno": [[[235, 11], [235, 22]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_optims_c99", "idiom": "Truth Value Test", "compli_code": ["(opt3.rewrite(log) - expr3).simplify() == 0"], "simple_code": ["not (opt3.rewrite(log) - expr3).simplify()"], "lineno": [[[236, 11], [236, 54]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_optims_c99", "idiom": "Truth Value Test", "compli_code": ["delta4 == 0"], "simple_code": ["not delta4"], "lineno": [[[241, 11], [241, 22]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_optims_c99", "idiom": "Truth Value Test", "compli_code": ["(opt4.rewrite(exp).rewrite(log).rewrite(Pow) - expr4).simplify() == 0"], "simple_code": ["not (opt4.rewrite(exp).rewrite(log).rewrite(Pow) - expr4).simplify()"], "lineno": [[[242, 11], [242, 80]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_optims_c99", "idiom": "Truth Value Test", "compli_code": ["delta5 == 0"], "simple_code": ["not delta5"], "lineno": [[[247, 11], [247, 22]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_optims_c99", "idiom": "Truth Value Test", "compli_code": ["delta7 == 0"], "simple_code": ["not delta7"], "lineno": [[[257, 11], [257, 22]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_optims_c99", "idiom": "Truth Value Test", "compli_code": ["(opt7.rewrite(log) - expr7).simplify() == 0"], "simple_code": ["not (opt7.rewrite(log) - expr7).simplify()"], "lineno": [[[258, 11], [258, 54]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_logaddexp_opt", "idiom": "Truth Value Test", "compli_code": ["logaddexp(x, y) - opt1 == 0"], "simple_code": ["not logaddexp(x, y) - opt1"], "lineno": [[[303, 11], [303, 38]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_logaddexp_opt", "idiom": "Truth Value Test", "compli_code": ["logaddexp(y, x) - opt1 == 0"], "simple_code": ["not logaddexp(y, x) - opt1"], "lineno": [[[304, 11], [304, 38]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_logaddexp2_opt", "idiom": "Truth Value Test", "compli_code": ["logaddexp2(x, y) - opt1 == 0"], "simple_code": ["not logaddexp2(x, y) - opt1"], "lineno": [[[312, 11], [312, 39]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_logaddexp2_opt", "idiom": "Truth Value Test", "compli_code": ["logaddexp2(y, x) - opt1 == 0"], "simple_code": ["not logaddexp2(y, x) - opt1"], "lineno": [[[313, 11], [313, 39]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_expm1_opt", "idiom": "Assign Multi Targets", "compli_code": ["opt8 = optimize(expr8, [expm1_opt])", "tgt8a = (exp(x) + 3)*expm1(x)", "tgt8b = 2*expm1(x) + expm1(2*x)"], "simple_code": ["opt8 , tgt8a , tgt8b  = optimize(expr8, [expm1_opt]), (exp(x) + 3) * expm1(x), 2 * expm1(x) + expm1(2 * x)", "", ""], "lineno": [[[119, 4], [119, 39]], [[120, 4], [120, 33]], [[121, 4], [121, 35]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_expm1_opt", "idiom": "Assign Multi Targets", "compli_code": ["opt9 = optimize(expr9, [expm1_opt])", "tgt9a = sin(tgt8a)", "tgt9b = sin(tgt8b)"], "simple_code": ["opt9 , tgt9a , tgt9b  = optimize(expr9, [expm1_opt]), sin(tgt8a), sin(tgt8b)", "", ""], "lineno": [[[131, 4], [131, 39]], [[132, 4], [132, 22]], [[133, 4], [133, 22]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_create_expand_pow_optimization", "idiom": "Assign Multi Targets", "compli_code": ["cc = lambda x: ccode(\n        optimize(x, [create_expand_pow_optimization(4)]))", "x = Symbol('x')"], "simple_code": ["cc , x  = lambda x: ccode(optimize(x, [create_expand_pow_optimization(4)])), Symbol('x')", ""], "lineno": [[[266, 4], [267, 57]], [[268, 4], [268, 19]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_matsolve", "idiom": "Assign Multi Targets", "compli_code": ["A = MatrixSymbol('A', n, n)", "x = MatrixSymbol('x', n, 1)"], "simple_code": ["A , x  = MatrixSymbol('A', n, n), MatrixSymbol('x', n, 1)", ""], "lineno": [[[291, 4], [291, 31]], [[292, 4], [292, 31]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_compiled_ccode_with_rewriting", "idiom": "Assign Multi Targets", "compli_code": ["x = Symbol('x')", "about_two = 2**(58/S(117))*3**(97/S(117))*5**(4/S(39))*7**(92/S(117))/S(30)*pi"], "simple_code": ["x , about_two  = Symbol('x'), 2 ** (58 / S(117)) * 3 ** (97 / S(117)) * 5 ** (4 / S(39)) * 7 ** (92 / S(117)) / S(30) * pi", ""], "lineno": [[[372, 4], [372, 19]], [[373, 4], [373, 82]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_compiled_ccode_with_rewriting", "idiom": "Assign Multi Targets", "compli_code": ["unchanged = 2*exp(x) - about_two", "xval = S(10)**-11"], "simple_code": ["unchanged , xval  = 2 * exp(x) - about_two, S(10) ** (-11)", ""], "lineno": [[[375, 4], [375, 36]], [[376, 4], [376, 21]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_compiled_ccode_with_rewriting", "idiom": "Assign Multi Targets", "compli_code": ["ref = unchanged.subs(x, xval).n(19)", "rewritten = optimize(2*exp(x) - about_two, [expm1_opt])", "NUMBER_OF_DIGITS = 25"], "simple_code": ["ref , rewritten , NUMBER_OF_DIGITS  = unchanged.subs(x, xval).n(19), optimize(2 * exp(x) - about_two, [expm1_opt]), 25", "", ""], "lineno": [[[377, 4], [377, 39]], [[379, 4], [379, 59]], [[385, 4], [385, 25]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_compiled_ccode_with_rewriting", "idiom": "Assign Multi Targets", "compli_code": ["func_c = '''\n#include <math.h>\n\ndouble func_unchanged(double x) {\n    return %(unchanged)s;\n}\ndouble func_rewritten(double x) {\n    return %(rewritten)s;\n}\n''' % dict(unchanged=ccode(unchanged.n(NUMBER_OF_DIGITS)),\n           rewritten=ccode(rewritten.n(NUMBER_OF_DIGITS)))", "func_pyx = '''\n#cython: language_level=3\ncdef extern double func_unchanged(double)\ncdef extern double func_rewritten(double)\ndef py_unchanged(x):\n    return func_unchanged(x)\ndef py_rewritten(x):\n    return func_rewritten(x)\n'''"], "simple_code": ["func_c , func_pyx  = '\\n#include <math.h>\\n\\ndouble func_unchanged(double x) {\\n    return %(unchanged)s;\\n}\\ndouble func_rewritten(double x) {\\n    return %(rewritten)s;\\n}\\n' % dict(unchanged=ccode(unchanged.n(NUMBER_OF_DIGITS)), rewritten=ccode(rewritten.n(NUMBER_OF_DIGITS))), '\\n#cython: language_level=3\\ncdef extern double func_unchanged(double)\\ncdef extern double func_rewritten(double)\\ndef py_unchanged(x):\\n    return func_unchanged(x)\\ndef py_rewritten(x):\\n    return func_rewritten(x)\\n'", ""], "lineno": [[[387, 4], [397, 58]], [[399, 4], [407, 3]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_rewriting.py", "cl": "", "me": "test_compiled_ccode_with_rewriting", "idiom": "Assign Multi Targets", "compli_code": ["err_rewritten = abs(mod.py_rewritten(1e-11) - ref)", "err_unchanged = abs(mod.py_unchanged(1e-11) - ref)"], "simple_code": ["err_rewritten , err_unchanged  = abs(mod.py_rewritten(1e-11) - ref), abs(mod.py_unchanged(1e-11) - ref)", ""], "lineno": [[[413, 8], [413, 58]], [[414, 8], [414, 58]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_ast.py", "cl": "", "me": "test_CodeBlock_free_symbols", "idiom": "Truth Value Test", "compli_code": ["c1.free_symbols == set()"], "simple_code": ["not c1.free_symbols"], "lineno": [[[188, 11], [188, 35]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_ast.py", "cl": "", "me": "test_none", "idiom": "Truth Value Test", "compli_code": ["none == None"], "simple_code": ["not none"], "lineno": [[[259, 11], [259, 23]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_ast.py", "cl": "", "me": "test_Type__cast_check__integers", "idiom": "Truth Value Test", "compli_code": ["uint8.cast_check(0) == 0"], "simple_code": ["not uint8.cast_check(0)"], "lineno": [[[335, 11], [335, 35]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_ast.py", "cl": "", "me": "test_Print", "idiom": "Truth Value Test", "compli_code": ["ps2.format_string == None"], "simple_code": ["not ps2.format_string"], "lineno": [[[581, 11], [581, 36]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_ast.py", "cl": "", "me": "test_AugAssign", "idiom": "Assign Multi Targets", "compli_code": ["a = aug_assign(x, binop, y)", "b = cls(x, y)"], "simple_code": ["a , b  = aug_assign(x, binop, y), cls(x, y)", ""], "lineno": [[[82, 8], [82, 35]], [[83, 8], [83, 21]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_ast.py", "cl": "", "me": "test_Assignment_printing", "idiom": "Assign Multi Targets", "compli_code": ["assignment_classes = [\n        Assignment,\n        AddAugmentedAssignment,\n        SubAugmentedAssignment,\n        MulAugmentedAssignment,\n        DivAugmentedAssignment,\n        ModAugmentedAssignment,\n    ]", "pairs = [\n        (x, 2 * y + 2),\n        (B[i], x),\n        (A22, B22),\n        (A[0, 0], x),\n    ]"], "simple_code": ["assignment_classes , pairs  = [Assignment, AddAugmentedAssignment, SubAugmentedAssignment, MulAugmentedAssignment, DivAugmentedAssignment, ModAugmentedAssignment], [(x, 2 * y + 2), (B[i], x), (A22, B22), (A[0, 0], x)]", ""], "lineno": [[[107, 4], [114, 5]], [[115, 4], [120, 5]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_ast.py", "cl": "", "me": "test_CodeBlock_topological_sort", "idiom": "Assign Multi Targets", "compli_code": ["ordered_assignments = [\n        # Note that the unrelated z=1 and y=2 are kept in that order\n        Assignment(z, 1),\n        Assignment(y, 2),\n        Assignment(x, y + z),\n        Assignment(t, x),\n        ]", "c1 = CodeBlock.topological_sort(assignments)"], "simple_code": ["ordered_assignments , c1  = [Assignment(z, 1), Assignment(y, 2), Assignment(x, y + z), Assignment(t, x)], CodeBlock.topological_sort(assignments)", ""], "lineno": [[[143, 4], [149, 9]], [[150, 4], [150, 48]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_ast.py", "cl": "", "me": "test_CodeBlock_topological_sort", "idiom": "Assign Multi Targets", "compli_code": ["free_assignments_ordered = [\n        Assignment(z, a * b),\n        Assignment(y, b + 3),\n        Assignment(x, y + z),\n        Assignment(t, x),\n        ]", "c2 = CodeBlock.topological_sort(free_assignments)"], "simple_code": ["free_assignments_ordered , c2  = [Assignment(z, a * b), Assignment(y, b + 3), Assignment(x, y + z), Assignment(t, x)], CodeBlock.topological_sort(free_assignments)", ""], "lineno": [[[171, 4], [176, 9]], [[178, 4], [178, 53]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_ast.py", "cl": "", "me": "test_Type", "idiom": "Assign Multi Targets", "compli_code": ["t1 = Type('t1')", "t2 = Type('t2')"], "simple_code": ["t1 , t2  = Type('t1'), Type('t2')", ""], "lineno": [[[302, 4], [302, 19]], [[303, 4], [303, 19]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_ast.py", "cl": "", "me": "test_Attribute", "idiom": "Assign Multi Targets", "compli_code": ["alignas16 = Attribute('alignas', [16])", "alignas32 = Attribute('alignas', [32])"], "simple_code": ["alignas16 , alignas32  = Attribute('alignas', [16]), Attribute('alignas', [32])", ""], "lineno": [[[343, 4], [343, 42]], [[344, 4], [344, 42]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_ast.py", "cl": "", "me": "test_Scope", "idiom": "Assign Multi Targets", "compli_code": ["assign = Assignment(x, y)", "incr = AddAugmentedAssignment(x, 1)"], "simple_code": ["assign , incr  = Assignment(x, y), AddAugmentedAssignment(x, 1)", ""], "lineno": [[[558, 4], [558, 29]], [[559, 4], [559, 39]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_ast.py", "cl": "", "me": "test_Scope", "idiom": "Assign Multi Targets", "compli_code": ["scp = Scope([assign, incr])", "cblk = CodeBlock(assign, incr)"], "simple_code": ["scp , cblk  = Scope([assign, incr]), CodeBlock(assign, incr)", ""], "lineno": [[[560, 4], [560, 31]], [[561, 4], [561, 34]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_ast.py", "cl": "", "me": "test_FunctionPrototype_and_FunctionDefinition", "idiom": "Assign Multi Targets", "compli_code": ["vx = Variable(x, type=real)", "vn = Variable(n, type=integer)"], "simple_code": ["vx , vn  = Variable(x, type=real), Variable(n, type=integer)", ""], "lineno": [[[585, 4], [585, 31]], [[586, 4], [586, 34]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_ast.py", "cl": "", "me": "test_ast_replace", "idiom": "Assign Multi Targets", "compli_code": ["x = Variable('x', real)", "y = Variable('y', real)", "n = Variable('n', integer)"], "simple_code": ["x , y , n  = Variable('x', real), Variable('y', real), Variable('n', integer)", "", ""], "lineno": [[[643, 4], [643, 27]], [[644, 4], [644, 27]], [[645, 4], [645, 30]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_ast.py", "cl": "", "me": "test_ast_replace", "idiom": "Assign Multi Targets", "compli_code": ["pname = pwer.name", "pcall = FunctionCall('pwer', [y, 3])"], "simple_code": ["pname , pcall  = pwer.name, FunctionCall('pwer', [y, 3])", ""], "lineno": [[[648, 4], [648, 21]], [[649, 4], [649, 40]]], "keyno": null}, {"file_path": "/Users/zhangzejunzhangzejun/Downloads/ze/diff_test/codegen/tests/test_algorithms.py", "cl": "", "me": "test_newtons_method_function__pycode", "idiom": "Assign Multi Targets", "compli_code": ["py_mod = py_module(func)", "namespace = {}"], "simple_code": ["py_mod , namespace  = py_module(func), {}", ""], "lineno": [[[75, 4], [75, 28]], [[76, 4], [76, 18]]], "keyno": null}]